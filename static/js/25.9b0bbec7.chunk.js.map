{"version":3,"file":"static/js/25.9b0bbec7.chunk.js","mappings":"gIACA,QAAuB,mBAAvB,EAA0D,4BAA1D,EAAqG,2BAArG,EAA2I,uBAA3I,EAA4K,sBAA5K,EAAiN,2BAAjN,EAA6P,6B,aCC7P,MAQA,EARiBA,IAEbC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAeC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,QAAAD,SAAOJ,EAAMM,QACbD,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAUC,SAAEJ,EAAMO,a,YCLxC,QAAgC,8BAAhC,EAA+E,+BCc/E,EAZoBP,IAEhBC,EAAAA,EAAAA,MAAA,MAAIC,UAAWC,EAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OACEH,UAAWC,EACXK,IAAI,yDACJC,IAAI,YAENJ,EAAAA,EAAAA,KAACK,EAAAA,GAAO,CAACC,GAAI,SAAWX,EAAMY,GAAGR,SAAEJ,EAAMM,U,aCA/C,MAgCMO,EAAYb,IAChB,MAAM,SAAEc,EAAQ,aAAEC,EAAY,MAAEC,IAAUC,EAAAA,EAAAA,MAO1C,OACEhB,EAAAA,EAAAA,MAAA,QAAMiB,SAAUH,GANAI,IAChBnB,EAAMoB,WAAWD,EAAKE,gBACtBL,GAAO,IAIgCZ,SAAA,EACrCC,EAAAA,EAAAA,KAAA,eACMS,EAAS,iBAAkB,CAC7BQ,UAAU,IAEZC,YAAY,qBAIdlB,EAAAA,EAAAA,KAAA,UACEmB,KAAK,SACLpB,SACD,WAGI,EAIX,EA5DcJ,IACZ,IAAIyB,EAAiBzB,EAAM0B,eAAeC,KAAKC,IAC7CvB,EAAAA,EAAAA,KAACwB,EAAU,CAAiBvB,KAAMsB,EAAOtB,KAAMM,GAAIgB,EAAOhB,IAAzCgB,EAAOhB,MAGtBkB,EAAkB9B,EAAM+B,aAAaJ,KAAKpB,IAC5CF,EAAAA,EAAAA,KAAC2B,EAAO,CAAkB1B,KAAMC,EAAQD,KAAMC,QAASA,EAAQA,SAAjDA,EAAQK,MAWxB,OACEX,EAAAA,EAAAA,MAAAgC,EAAAA,SAAA,CAAA7B,SAAA,EACEH,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAOC,SAAA,EACrBC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAgBC,UAC9BC,EAAAA,EAAAA,KAAA,MAAIH,UAAWC,EAAeC,SAAEqB,OAElCpB,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAWC,SAAE0B,QAE/BzB,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAiBC,UAC/BC,EAAAA,EAAAA,KAACQ,EAAQ,CAACO,WAAYpB,EAAMoB,iBAE7B,E,+BCyBP,SAAec,E,OAAAA,KACbC,EAAAA,EAAAA,KA5BqBC,IACd,CACLV,eAAgBU,EAAMC,SAASX,eAC/BK,aAAcK,EAAMC,SAASN,aAC7BV,eAAgBe,EAAMC,SAAShB,mBAGTiB,IACjB,CACLlB,WAAaC,IACXiB,GAASC,EAAAA,EAAAA,GAAwBlB,GAAgB,MAmBrDmB,EAAAA,EAFF,CAGEC,E,uEC/DF,IAAIC,EAA8BN,IAAK,CAAQO,OAAQP,EAAMQ,KAAKD,SAE3D,MAAMH,EAAoBK,IAQMV,EAAAA,EAAAA,IAAQO,EAARP,EAPVnC,GACpBA,EAAM2C,QAGFtC,EAAAA,EAAAA,KAACwC,EAAS,IAAK7C,KAFfK,EAAAA,EAAAA,KAACyC,EAAAA,GAAQ,CAACnC,GAAI,a","sources":["webpack://react_app/./src/components/Chat/Chat.module.css?f66a","components/Chat/Message/Message.jsx","webpack://react_app/./src/components/Chat/DialogName/Dialog.module.css?79ee","components/Chat/DialogName/DialogName.jsx","components/Chat/Chat.jsx","components/Chat/ChatContainer.jsx","hoc/withAuthNavigate.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"Chat_chat__XW-7M\",\"chat_elements\":\"Chat_chat_elements__QhwJu\",\"chat_element\":\"Chat_chat_element__pH8TN\",\"messages\":\"Chat_messages__pIj2p\",\"message\":\"Chat_message__vIKmU\",\"message_item\":\"Chat_message_item__zA74l\",\"message_window\":\"Chat_message_window__PLx6q\"};","import s from \"./../Chat.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div className={s.message_item}>\r\n      <span>{props.name}</span>\r\n      <div className={s.message}>{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default Message;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialog_avatar\":\"Dialog_dialog_avatar__eLVTH\",\"dialog_content\":\"Dialog_dialog_content__+DAC3\"};","import { NavLink } from \"react-router-dom\";\r\nimport s from \"./Dialog.module.css\";\r\n\r\nconst DialogName = (props) => {\r\n  return (\r\n    <li className={s.dialog_content}>\r\n      <img\r\n        className={s.dialog_avatar}\r\n        src=\"https://www.svgrepo.com/show/452030/avatar-default.svg\"\r\n        alt=\"avatar\"\r\n      />\r\n      <NavLink to={\"/chat/\" + props.id}>{props.name}</NavLink>\r\n    </li>\r\n  );\r\n};\r\nexport default DialogName;\r\n","import s from \"./Chat.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogName from \"./DialogName/DialogName\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n// import {\r\n//   addMessageActionCreator,\r\n//   updateNewTextMessageActionCreator,\r\n// } from \"../../redux/chat-reducer\";\r\n\r\nconst Chat = (props) => {\r\n  let dialogElements = props.dialogNameData.map((dialog) => (\r\n    <DialogName key={dialog.id} name={dialog.name} id={dialog.id} /> //  добавила key\r\n  ));\r\n\r\n  let messageElements = props.messagesData.map((message) => (\r\n    <Message key={message.id} name={message.name} message={message.message} /> //  добавила key\r\n  ));\r\n\r\n  // let onAddMessage = () => {\r\n  //   props.addMessage();\r\n  // };\r\n  // let onMessageChange = (event) => {\r\n  //   let text = event.target.value;\r\n  //   props.updateNewTextMessage(text);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <div className={s.chat}>\r\n        <div className={s.chat_elements}>\r\n          <ul className={s.chat_element}>{dialogElements}</ul>\r\n        </div>\r\n        <div className={s.messages}>{messageElements}</div>\r\n      </div>\r\n      <div className={s.message_window}>\r\n        <ChatForm addMessage={props.addMessage} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ChatForm = (props) => {\r\n  const { register, handleSubmit, reset } = useForm();\r\n\r\n  const onSubmit = (data) => {\r\n    props.addMessage(data.newMessageText); //этот текст необходимо отправить в бизнес\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <textarea\r\n        {...register(\"newMessageText\", {\r\n          required: true,\r\n        })}\r\n        placeholder=\"Write a message\"\r\n        // onChange={onMessageChange}\r\n        // value={props.newMessageText}\r\n      />\r\n      <button\r\n        type=\"submit\"\r\n        // onClick={onAddMessage} type=\"button\"\r\n      >\r\n        Send\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import Chat from \"./Chat\";\r\nimport {\r\n  addMessageActionCreator,\r\n  updateNewTextMessageActionCreator,\r\n} from \"../../redux/chat-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthNavigate } from \"../../hoc/withAuthNavigate\";\r\nimport { compose } from \"redux\";\r\n\r\n// import StoreContext from \"../../StoreContext\";\r\n\r\n// const ChatContainer = () => {\r\n//   return (\r\n//     <StoreContext.Consumer>\r\n//       {(store) => {\r\n//         let state = store.getState();\r\n\r\n//         let addMessage = () => {\r\n//           store.dispatch(addMessageActionCreator());\r\n//         };\r\n//         let onMessageChange = (text) => {\r\n//           store.dispatch(updateNewTextMessageActionCreator(text));\r\n//         };\r\n//         return (\r\n//           <Chat\r\n//             dialogNameData={state.chatPage.dialogNameData}\r\n//             messagesData={state.chatPage.messagesData}\r\n//             addMessage={addMessage}\r\n//             updateNewTextMessage={onMessageChange}\r\n//             newMessageText={state.chatPage.newMessageText}\r\n//           />\r\n//         );\r\n//       }}\r\n//     </StoreContext.Consumer>\r\n//   );\r\n// };\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogNameData: state.chatPage.dialogNameData,\r\n    messagesData: state.chatPage.messagesData,\r\n    newMessageText: state.chatPage.newMessageText,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addMessage: (newMessageText) => {\r\n      dispatch(addMessageActionCreator(newMessageText));\r\n    },\r\n    // updateNewTextMessage: (text) => {\r\n    //   dispatch(updateNewTextMessageActionCreator(text));\r\n    // },\r\n  };\r\n};\r\n\r\n//вместо этого:\r\n// let AuthNavigateComponent = withAuthNavigate(Chat);\r\n// const ChatContainer = connect(\r\n//   mapStateToProps,\r\n//   mapDispatchToProps\r\n// )(AuthNavigateComponent);\r\n// export default ChatContainer;\r\n\r\n//это:\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthNavigate\r\n)(Chat);\r\n","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForNavigate = (state) => ({ isAuth: state.auth.isAuth });\r\n\r\nexport const withAuthNavigate = (Component) => {\r\n  const NavigateComponent = (props) => {\r\n    if (!props.isAuth) {\r\n      return <Navigate to={\"/login/\"} />;\r\n    } else {\r\n      return <Component {...props} />;\r\n    }\r\n  };\r\n  let ConnectedAuthNavigateComponent = connect(mapStateToPropsForNavigate)(\r\n    NavigateComponent\r\n  );\r\n\r\n  return ConnectedAuthNavigateComponent;\r\n};\r\n"],"names":["props","_jsxs","className","s","children","_jsx","name","message","src","alt","NavLink","to","id","ChatForm","register","handleSubmit","reset","useForm","onSubmit","data","addMessage","newMessageText","required","placeholder","type","dialogElements","dialogNameData","map","dialog","DialogName","messageElements","messagesData","Message","_Fragment","compose","connect","state","chatPage","dispatch","addMessageActionCreator","withAuthNavigate","Chat","mapStateToPropsForNavigate","isAuth","auth","Component","Navigate"],"sourceRoot":""}