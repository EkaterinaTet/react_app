{"version":3,"file":"static/js/288.6d69a6b8.chunk.js","mappings":"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","sources":["webpack://react_app/./src/components/Profile/MyPosts/MyPost.module.css?8a86","webpack://react_app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","webpack://react_app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","hoc/withAuthNavigate.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile_posts\":\"MyPost_profile_posts__yylmK\",\"posts\":\"MyPost_posts__JEnoF\",\"posts_form\":\"MyPost_posts_form__IhRAv\",\"textarea_error\":\"MyPost_textarea_error__MTeAU\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__dWfXd\"};","import s from \"./Post.module.css\";\r\n\r\nfunction Post(props) {\r\n  return (\r\n    <div className={s.post}>\r\n      <p>{props.message}</p>\r\n      <span>{props.like}</span> ♥<button type=\"button\">Like</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React, { memo } from \"react\";\r\nimport s from \"./MyPost.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst MyPosts = (props) => {\r\n  let postElement = [...props.postData]\r\n    .reverse()\r\n    .map((post) => (\r\n      <Post id={post.id} message={post.message} like={post.like} />\r\n    ));\r\n\r\n  // let newPostElement = React.createRef();\r\n\r\n  // let onAddPost = () => {\r\n  //   props.addPost();\r\n  // };\r\n  // //будет обрабатывать,когда будет попытка изменить текст в textarea\r\n  // let onPostChange = () => {\r\n  //   let text = newPostElement.current.value;\r\n  //   props.updateNewPostText(text);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <div className={s.profile_posts}>\r\n        <MyPostsForm\r\n          // newPostElement={props.newPostElement}\r\n          addPost={props.addPost}\r\n        />\r\n      </div>\r\n      <div className={s.posts}>{postElement}</div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst MyPostsForm = (props) => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm();\r\n\r\n  const onSubmit = (data) => {\r\n    props.addPost(data.newPostText);\r\n    reset();\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)} className={s.posts_form}>\r\n      <textarea\r\n        // className={errors.newPostText ? s.textarea_error : \"\"}\r\n        {...register(\"newPostText\", {\r\n          required: true,\r\n        })}\r\n        placeholder=\"Write a post\"\r\n\r\n        // ref={props.newPostElement}\r\n\r\n        // value={props.newPostText}\r\n        // onChange={onPostChange}\r\n      />\r\n\r\n      <button\r\n        type=\"submit\"\r\n        //  onClick={onAddPost} type=\"button\"\r\n      >\r\n        Send\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\nexport default MyPosts;\r\n","import {\r\n  addPostActionCreator,\r\n  updateNewPostTextActionCreator,\r\n} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// import StoreContext from \"../../../StoreContext\";\r\n\r\n// function MyPostsContainer() {\r\n//   return (\r\n//     <StoreContext.Consumer>\r\n//       {(store) => {\r\n//         let state = store.getState();\r\n\r\n//         let addPost = () => {\r\n//           store.dispatch(addPostActionCreator());\r\n//         };\r\n//         let onPostChange = (text) => {\r\n//           let action = updateNewPostTextActionCreator(text);\r\n//           store.dispatch(action);\r\n//         };\r\n\r\n//         return (\r\n//           <MyPosts\r\n//             updateNewPostText={onPostChange}\r\n//             addPost={addPost}\r\n//             postData={state.profilePage.postData}\r\n//             newPostText={state.profilePage.newPostText}\r\n//           />\r\n//         );\r\n//       }}\r\n//     </StoreContext.Consumer>\r\n//   );\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    postData: state.profilePage.postData,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    },\r\n    // updateNewPostText: (text) => {\r\n    //   let action = updateNewPostTextActionCreator(text);\r\n    //   dispatch(action);\r\n    // },\r\n  };\r\n};\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profile_data\":\"ProfileInfo_profile_data__UZfki\",\"profile_text\":\"ProfileInfo_profile_text__4-FvA\",\"input_file\":\"ProfileInfo_input_file__fT39q\"};","import React, { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n//как было\r\n// class ProfileStatus extends React.Component {\r\n//   state = {\r\n//     editMode: false,\r\n//     status: this.props.status,\r\n//   };\r\n//   activateEditMode = () => {\r\n//     this.setState({\r\n//       editMode: true,\r\n//     });\r\n//   };\r\n//   deactivateEditMode = () => {\r\n//     this.setState({\r\n//       editMode: false,\r\n//     });\r\n//     this.props.updateStatus(this.state.status);\r\n//   };\r\n//   onStatusChange = (e) => {\r\n//     this.setState({\r\n//       status: e.currentTarget.value,\r\n//     });\r\n//   };\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (prevProps.status !== this.props.status) {\r\n//       this.setState({\r\n//         status: this.props.status,\r\n//       });\r\n//     }\r\n//   }\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         {!this.state.editMode && (\r\n//           <div>\r\n//             <span onDoubleClick={this.activateEditMode}>\r\n//               {this.props.status || \"----\"}\r\n//             </span>\r\n//           </div>\r\n//         )}\r\n//         {this.state.editMode && (\r\n//           <div>\r\n//             <input\r\n//               onChange={this.onStatusChange}\r\n//               autoFocus={true}\r\n//               onBlur={this.deactivateEditMode}\r\n//               type=\"text\"\r\n//               value={this.state.status}\r\n//             />\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n//как стало:\r\n\r\nconst ProfileStatus = (props) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  const onSubmit = (data) => {\r\n    console.log(data);\r\n  };\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        {!editMode && (\r\n          <div>\r\n            <span onDoubleClick={activateEditMode}>\r\n              {props.status || \"----\"}\r\n            </span>\r\n          </div>\r\n        )}\r\n        {editMode && (\r\n          <div>\r\n            <input\r\n              {...register(\"status\")}\r\n              onChange={onStatusChange}\r\n              autoFocus={true}\r\n              onBlur={deactivateEditMode}\r\n              type=\"text\"\r\n              value={status}\r\n            />\r\n          </div>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatus;\r\n","import s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport userImg from \"../../../assets/img/user.png\";\r\n\r\nfunction ProfileInfo(props) {\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  }\r\n  const onMainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      props.savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className={s.profile_data}>\r\n        <img\r\n          className={s.avatar}\r\n          src={\r\n            props.profile.photos.large != null\r\n              ? props.profile.photos.large\r\n              : userImg\r\n          }\r\n          alt=\"avatar\"\r\n        />\r\n        {props.isOwner && (\r\n          <label className={s.input_file}>\r\n            <input name=\"file\" type=\"file\" onChange={onMainPhotoSelected} />\r\n            <span>Выберите файл</span>\r\n          </label>\r\n        )}\r\n        <div className={s.profile_text}>\r\n          <p>{props.profile.fullName}</p>\r\n          <p>\r\n            {props.profile.lookingForAJob == true\r\n              ? \"В поисках работы\"\r\n              : \"Не ищу работу\"}\r\n            - {props.profile.lookingForAJobDescription}\r\n          </p>\r\n          <ProfileStatus\r\n            status={props.status}\r\n            updateStatus={props.updateStatus}\r\n          />\r\n          <p>\r\n            <i>{props.profile.aboutMe}</i>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default ProfileInfo;\r\n","import MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nfunction Profile(props) {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        savePhoto={props.savePhoto}\r\n        isOwner={props.isOwner}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n}\r\nexport default Profile;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  setUserProfile,\r\n  getUserProfile,\r\n  getStatus,\r\n  updateStatus,\r\n  savePhoto,\r\n} from \"../../redux/profile-reducer\";\r\nimport { withAuthNavigate } from \"../../hoc/withAuthNavigate\";\r\nimport { compose } from \"redux\";\r\n\r\nfunction ProfileContainer(props) {\r\n  let { userId } = useParams();\r\n\r\n  useEffect(() => {\r\n    if (!userId) {\r\n      userId = props.authorizedUserId; // мой - 30607\r\n    }\r\n    props.getUserProfile(userId);\r\n    props.getStatus(userId);\r\n  }, [userId]);\r\n\r\n  return (\r\n    <div>\r\n      <Profile\r\n        {...props}\r\n        savePhoto={props.savePhoto}\r\n        isOwner={!userId}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.id,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\n//вместо этого:\r\n// let AuthNavigateComponent = withAuthNavigate(ProfileContainer);\r\n// export default connect(mapStateToProps, { setUserProfile, getUserProfile })(AuthNavigateComponent);\r\n\r\n//это:\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    setUserProfile,\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n  }),\r\n  withAuthNavigate\r\n)(ProfileContainer);\r\n","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForNavigate = (state) => ({ isAuth: state.auth.isAuth });\r\n\r\nexport const withAuthNavigate = (Component) => {\r\n  const NavigateComponent = (props) => {\r\n    if (!props.isAuth) {\r\n      return <Navigate to={\"/login/\"} />;\r\n    } else {\r\n      return <Component {...props} />;\r\n    }\r\n  };\r\n  let ConnectedAuthNavigateComponent = connect(mapStateToPropsForNavigate)(\r\n    NavigateComponent\r\n  );\r\n\r\n  return ConnectedAuthNavigateComponent;\r\n};\r\n"],"names":["props","_jsxs","className","s","children","_jsx","message","like","type","MyPostsForm","register","handleSubmit","formState","errors","reset","useForm","onSubmit","data","addPost","newPostText","required","placeholder","postElement","postData","reverse","map","post","Post","id","_Fragment","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","editMode","setEditMode","useState","status","setStatus","useEffect","console","log","onDoubleClick","activateEditMode","onChange","e","currentTarget","value","autoFocus","onBlur","deactivateEditMode","updateStatus","profile","profile_data","avatar","src","photos","large","userImg","alt","isOwner","input_file","name","target","files","length","savePhoto","profile_text","fullName","lookingForAJob","lookingForAJobDescription","ProfileStatus","aboutMe","Preloader","ProfileInfo","MyPostsContainer","compose","authorizedUserId","auth","isAuth","setUserProfile","getUserProfile","getStatus","withAuthNavigate","userId","useParams","Profile","mapStateToPropsForNavigate","Component","Navigate","to"],"sourceRoot":""}